// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbgrpc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RBGRPC {

  /// <summary>Holder for reflection information generated from rbgrpc.proto</summary>
  public static partial class RbgrpcReflection {

    #region Descriptor
    /// <summary>File descriptor for rbgrpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RbgrpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxyYmdycGMucHJvdG8SBlJCR1JQQyI4ChRTdWJzY3JpcHRpb25SZXNwb25z",
            "ZRIPCgdTdWNjZXNzGAEgASgIEg8KB01lc3NhZ2UYAiABKAkiYAoTU3Vic2Ny",
            "aXB0aW9uUmVxdWVzdBInCgtJbnN0cnVtZW50cxgBIAMoCzISLlJCR1JQQy5J",
            "bnN0cnVtZW50EhAKCElzU3ByZWFkGAIgASgIEg4KBklzTGlzdBgDIAEoCCIx",
            "CgtDcmVkZW50aWFscxIQCghVc2VybmFtZRgBIAEoCRIQCghQYXNzd29yZBgC",
            "IAEoCSKfAgoKSW5zdHJ1bWVudBI0Cg5JbnN0cnVtZW50VHlwZRgBIAEoDjIc",
            "LlJCR1JQQy5JbnN0cnVtZW50Lkluc3RyVHlwZRIYChBVbmRlcmx5aW5nU3lt",
            "Ym9sGAIgASgJEhUKDUV4cGlyYXRpb25EYXkYAyABKAUSFwoPRXhwaXJhdGlv",
            "bk1vbnRoGAQgASgFEhYKDkV4cGlyYXRpb25ZZWFyGAUgASgFEg4KBlN0cmlr",
            "ZRgGIAEoAhIUCgxJc0NhbGxPcHRpb24YByABKAgSCwoDaWR4GAggASgFEhUK",
            "DUlzTGVnT2ZTcHJlYWQYCSABKAgiLwoJSW5zdHJUeXBlEgoKBkVRVUlUWRAA",
            "EgoKBk9QVElPThABEgoKBkZVVFVSRRACMrUBChNTdWJzY3JpcHRpb25NYW5h",
            "Z2VyEk4KEVN1YnNjcmliZVRvVHJhZGVzEhsuUkJHUlBDLlN1YnNjcmlwdGlv",
            "blJlcXVlc3QaHC5SQkdSUEMuU3Vic2NyaXB0aW9uUmVzcG9uc2USTgoRU3Vi",
            "c2NyaWJlVG9RdW90ZXMSGy5SQkdSUEMuU3Vic2NyaXB0aW9uUmVxdWVzdBoc",
            "LlJCR1JQQy5TdWJzY3JpcHRpb25SZXNwb25zZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RBGRPC.SubscriptionResponse), global::RBGRPC.SubscriptionResponse.Parser, new[]{ "Success", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RBGRPC.SubscriptionRequest), global::RBGRPC.SubscriptionRequest.Parser, new[]{ "Instruments", "IsSpread", "IsList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RBGRPC.Credentials), global::RBGRPC.Credentials.Parser, new[]{ "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RBGRPC.Instrument), global::RBGRPC.Instrument.Parser, new[]{ "InstrumentType", "UnderlyingSymbol", "ExpirationDay", "ExpirationMonth", "ExpirationYear", "Strike", "IsCallOption", "Idx", "IsLegOfSpread" }, null, new[]{ typeof(global::RBGRPC.Instrument.Types.InstrType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SubscriptionResponse : pb::IMessage<SubscriptionResponse> {
    private static readonly pb::MessageParser<SubscriptionResponse> _parser = new pb::MessageParser<SubscriptionResponse>(() => new SubscriptionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RBGRPC.RbgrpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse(SubscriptionResponse other) : this() {
      success_ = other.success_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionResponse Clone() {
      return new SubscriptionResponse(this);
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscriptionRequest : pb::IMessage<SubscriptionRequest> {
    private static readonly pb::MessageParser<SubscriptionRequest> _parser = new pb::MessageParser<SubscriptionRequest>(() => new SubscriptionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RBGRPC.RbgrpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest(SubscriptionRequest other) : this() {
      instruments_ = other.instruments_.Clone();
      isSpread_ = other.isSpread_;
      isList_ = other.isList_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest Clone() {
      return new SubscriptionRequest(this);
    }

    /// <summary>Field number for the "Instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RBGRPC.Instrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::RBGRPC.Instrument.Parser);
    private readonly pbc::RepeatedField<global::RBGRPC.Instrument> instruments_ = new pbc::RepeatedField<global::RBGRPC.Instrument>();
    /// <summary>
    ///this is supposed to be either one instrument or a spread
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RBGRPC.Instrument> Instruments {
      get { return instruments_; }
    }

    /// <summary>Field number for the "IsSpread" field.</summary>
    public const int IsSpreadFieldNumber = 2;
    private bool isSpread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSpread {
      get { return isSpread_; }
      set {
        isSpread_ = value;
      }
    }

    /// <summary>Field number for the "IsList" field.</summary>
    public const int IsListFieldNumber = 3;
    private bool isList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsList {
      get { return isList_; }
      set {
        isList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      if (IsSpread != other.IsSpread) return false;
      if (IsList != other.IsList) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (IsSpread != false) hash ^= IsSpread.GetHashCode();
      if (IsList != false) hash ^= IsList.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (IsSpread != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSpread);
      }
      if (IsList != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (IsSpread != false) {
        size += 1 + 1;
      }
      if (IsList != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionRequest other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      if (other.IsSpread != false) {
        IsSpread = other.IsSpread;
      }
      if (other.IsList != false) {
        IsList = other.IsList;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
          case 16: {
            IsSpread = input.ReadBool();
            break;
          }
          case 24: {
            IsList = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Credentials : pb::IMessage<Credentials> {
    private static readonly pb::MessageParser<Credentials> _parser = new pb::MessageParser<Credentials>(() => new Credentials());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Credentials> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RBGRPC.RbgrpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials(Credentials other) : this() {
      username_ = other.username_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Credentials Clone() {
      return new Credentials(this);
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Credentials);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Credentials other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Credentials other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Instrument : pb::IMessage<Instrument> {
    private static readonly pb::MessageParser<Instrument> _parser = new pb::MessageParser<Instrument>(() => new Instrument());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Instrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RBGRPC.RbgrpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument(Instrument other) : this() {
      instrumentType_ = other.instrumentType_;
      underlyingSymbol_ = other.underlyingSymbol_;
      expirationDay_ = other.expirationDay_;
      expirationMonth_ = other.expirationMonth_;
      expirationYear_ = other.expirationYear_;
      strike_ = other.strike_;
      isCallOption_ = other.isCallOption_;
      idx_ = other.idx_;
      isLegOfSpread_ = other.isLegOfSpread_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument Clone() {
      return new Instrument(this);
    }

    /// <summary>Field number for the "InstrumentType" field.</summary>
    public const int InstrumentTypeFieldNumber = 1;
    private global::RBGRPC.Instrument.Types.InstrType instrumentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RBGRPC.Instrument.Types.InstrType InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = value;
      }
    }

    /// <summary>Field number for the "UnderlyingSymbol" field.</summary>
    public const int UnderlyingSymbolFieldNumber = 2;
    private string underlyingSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnderlyingSymbol {
      get { return underlyingSymbol_; }
      set {
        underlyingSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExpirationDay" field.</summary>
    public const int ExpirationDayFieldNumber = 3;
    private int expirationDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpirationDay {
      get { return expirationDay_; }
      set {
        expirationDay_ = value;
      }
    }

    /// <summary>Field number for the "ExpirationMonth" field.</summary>
    public const int ExpirationMonthFieldNumber = 4;
    private int expirationMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpirationMonth {
      get { return expirationMonth_; }
      set {
        expirationMonth_ = value;
      }
    }

    /// <summary>Field number for the "ExpirationYear" field.</summary>
    public const int ExpirationYearFieldNumber = 5;
    private int expirationYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpirationYear {
      get { return expirationYear_; }
      set {
        expirationYear_ = value;
      }
    }

    /// <summary>Field number for the "Strike" field.</summary>
    public const int StrikeFieldNumber = 6;
    private float strike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "IsCallOption" field.</summary>
    public const int IsCallOptionFieldNumber = 7;
    private bool isCallOption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCallOption {
      get { return isCallOption_; }
      set {
        isCallOption_ = value;
      }
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 8;
    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "IsLegOfSpread" field.</summary>
    public const int IsLegOfSpreadFieldNumber = 9;
    private bool isLegOfSpread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLegOfSpread {
      get { return isLegOfSpread_; }
      set {
        isLegOfSpread_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Instrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Instrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentType != other.InstrumentType) return false;
      if (UnderlyingSymbol != other.UnderlyingSymbol) return false;
      if (ExpirationDay != other.ExpirationDay) return false;
      if (ExpirationMonth != other.ExpirationMonth) return false;
      if (ExpirationYear != other.ExpirationYear) return false;
      if (Strike != other.Strike) return false;
      if (IsCallOption != other.IsCallOption) return false;
      if (Idx != other.Idx) return false;
      if (IsLegOfSpread != other.IsLegOfSpread) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentType != 0) hash ^= InstrumentType.GetHashCode();
      if (UnderlyingSymbol.Length != 0) hash ^= UnderlyingSymbol.GetHashCode();
      if (ExpirationDay != 0) hash ^= ExpirationDay.GetHashCode();
      if (ExpirationMonth != 0) hash ^= ExpirationMonth.GetHashCode();
      if (ExpirationYear != 0) hash ^= ExpirationYear.GetHashCode();
      if (Strike != 0F) hash ^= Strike.GetHashCode();
      if (IsCallOption != false) hash ^= IsCallOption.GetHashCode();
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (IsLegOfSpread != false) hash ^= IsLegOfSpread.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstrumentType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentType);
      }
      if (UnderlyingSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnderlyingSymbol);
      }
      if (ExpirationDay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExpirationDay);
      }
      if (ExpirationMonth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExpirationMonth);
      }
      if (ExpirationYear != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExpirationYear);
      }
      if (Strike != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Strike);
      }
      if (IsCallOption != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsCallOption);
      }
      if (Idx != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Idx);
      }
      if (IsLegOfSpread != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsLegOfSpread);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentType);
      }
      if (UnderlyingSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnderlyingSymbol);
      }
      if (ExpirationDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirationDay);
      }
      if (ExpirationMonth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirationMonth);
      }
      if (ExpirationYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirationYear);
      }
      if (Strike != 0F) {
        size += 1 + 4;
      }
      if (IsCallOption != false) {
        size += 1 + 1;
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (IsLegOfSpread != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Instrument other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentType != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.UnderlyingSymbol.Length != 0) {
        UnderlyingSymbol = other.UnderlyingSymbol;
      }
      if (other.ExpirationDay != 0) {
        ExpirationDay = other.ExpirationDay;
      }
      if (other.ExpirationMonth != 0) {
        ExpirationMonth = other.ExpirationMonth;
      }
      if (other.ExpirationYear != 0) {
        ExpirationYear = other.ExpirationYear;
      }
      if (other.Strike != 0F) {
        Strike = other.Strike;
      }
      if (other.IsCallOption != false) {
        IsCallOption = other.IsCallOption;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.IsLegOfSpread != false) {
        IsLegOfSpread = other.IsLegOfSpread;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            instrumentType_ = (global::RBGRPC.Instrument.Types.InstrType) input.ReadEnum();
            break;
          }
          case 18: {
            UnderlyingSymbol = input.ReadString();
            break;
          }
          case 24: {
            ExpirationDay = input.ReadInt32();
            break;
          }
          case 32: {
            ExpirationMonth = input.ReadInt32();
            break;
          }
          case 40: {
            ExpirationYear = input.ReadInt32();
            break;
          }
          case 53: {
            Strike = input.ReadFloat();
            break;
          }
          case 56: {
            IsCallOption = input.ReadBool();
            break;
          }
          case 64: {
            Idx = input.ReadInt32();
            break;
          }
          case 72: {
            IsLegOfSpread = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Instrument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InstrType {
        [pbr::OriginalName("EQUITY")] Equity = 0,
        [pbr::OriginalName("OPTION")] Option = 1,
        [pbr::OriginalName("FUTURE")] Future = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
