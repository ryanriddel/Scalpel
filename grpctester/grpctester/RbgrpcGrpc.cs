// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rbgrpc.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace RBGRPC {
  public static partial class SubscriptionManager
  {
    static readonly string __ServiceName = "RBGRPC.SubscriptionManager";

    static readonly grpc::Marshaller<global::RBGRPC.SubscriptionRequest> __Marshaller_RBGRPC_SubscriptionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RBGRPC.SubscriptionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::RBGRPC.SubscriptionResponse> __Marshaller_RBGRPC_SubscriptionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RBGRPC.SubscriptionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::RBGRPC.SubscriptionRequest, global::RBGRPC.SubscriptionResponse> __Method_SubscribeToTrades = new grpc::Method<global::RBGRPC.SubscriptionRequest, global::RBGRPC.SubscriptionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeToTrades",
        __Marshaller_RBGRPC_SubscriptionRequest,
        __Marshaller_RBGRPC_SubscriptionResponse);

    static readonly grpc::Method<global::RBGRPC.SubscriptionRequest, global::RBGRPC.SubscriptionResponse> __Method_SubscribeToQuotes = new grpc::Method<global::RBGRPC.SubscriptionRequest, global::RBGRPC.SubscriptionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeToQuotes",
        __Marshaller_RBGRPC_SubscriptionRequest,
        __Marshaller_RBGRPC_SubscriptionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RBGRPC.RbgrpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SubscriptionManager</summary>
    public abstract partial class SubscriptionManagerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RBGRPC.SubscriptionResponse> SubscribeToTrades(global::RBGRPC.SubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RBGRPC.SubscriptionResponse> SubscribeToQuotes(global::RBGRPC.SubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SubscriptionManager</summary>
    public partial class SubscriptionManagerClient : grpc::ClientBase<SubscriptionManagerClient>
    {
      /// <summary>Creates a new client for SubscriptionManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SubscriptionManagerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SubscriptionManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SubscriptionManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SubscriptionManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SubscriptionManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RBGRPC.SubscriptionResponse SubscribeToTrades(global::RBGRPC.SubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeToTrades(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RBGRPC.SubscriptionResponse SubscribeToTrades(global::RBGRPC.SubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeToTrades, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RBGRPC.SubscriptionResponse> SubscribeToTradesAsync(global::RBGRPC.SubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeToTradesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RBGRPC.SubscriptionResponse> SubscribeToTradesAsync(global::RBGRPC.SubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeToTrades, null, options, request);
      }
      public virtual global::RBGRPC.SubscriptionResponse SubscribeToQuotes(global::RBGRPC.SubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeToQuotes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RBGRPC.SubscriptionResponse SubscribeToQuotes(global::RBGRPC.SubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeToQuotes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RBGRPC.SubscriptionResponse> SubscribeToQuotesAsync(global::RBGRPC.SubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeToQuotesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RBGRPC.SubscriptionResponse> SubscribeToQuotesAsync(global::RBGRPC.SubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeToQuotes, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SubscriptionManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SubscriptionManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SubscriptionManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeToTrades, serviceImpl.SubscribeToTrades)
          .AddMethod(__Method_SubscribeToQuotes, serviceImpl.SubscribeToQuotes).Build();
    }

  }
}
#endregion
