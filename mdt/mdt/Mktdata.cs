// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mktdata.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Streaminterface {

  /// <summary>Holder for reflection information generated from mktdata.proto</summary>
  public static partial class MktdataReflection {

    #region Descriptor
    /// <summary>File descriptor for mktdata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MktdataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1ta3RkYXRhLnByb3RvEg9zdHJlYW1pbnRlcmZhY2UihAIKCkluc3RydW1l",
            "bnQSPQoOSW5zdHJ1bWVudFR5cGUYASABKA4yJS5zdHJlYW1pbnRlcmZhY2Uu",
            "SW5zdHJ1bWVudC5JbnN0clR5cGUSGAoQVW5kZXJseWluZ1N5bWJvbBgCIAEo",
            "CRIVCg1FeHBpcmF0aW9uRGF5GAMgASgFEhcKD0V4cGlyYXRpb25Nb250aBgE",
            "IAEoBRIWCg5FeHBpcmF0aW9uWWVhchgFIAEoBRIOCgZTdHJpa2UYBiABKAIS",
            "FAoMSXNDYWxsT3B0aW9uGAcgASgIIi8KCUluc3RyVHlwZRIKCgZFUVVJVFkQ",
            "ABIKCgZPUFRJT04QARIKCgZGVVRVUkUQAiLqAgoMVHJhZGVNZXNzYWdlEhEK",
            "CVRpbWVzdGFtcBgBIAEoBBIwCgtJbnN0cnVtZW50cxgCIAMoCzIbLnN0cmVh",
            "bWludGVyZmFjZS5JbnN0cnVtZW50Eg0KBVByaWNlGAMgASgCEgwKBFNpemUY",
            "BCABKA0SEAoIRXhjaGFuZ2UYBSABKAkSEwoLQmlkUHJpY2VCQk8YBiABKAIS",
            "EwoLQXNrUHJpY2VCQk8YByABKAISEgoKQmlkU2l6ZUJCTxgIIAEoDRISCgpB",
            "c2tTaXplQkJPGAkgASgNEhYKDkJpZEV4Y2hhbmdlQkJPGAogASgJEhYKDkFz",
            "a0V4Y2hhbmdlQkJPGAsgASgJEhgKEERheXNIaWdoZXN0UHJpY2UYDCABKAIS",
            "FwoPRGF5c0xvd2VzdFByaWNlGA0gASgCEhgKEERheXNPcGVuaW5nUHJpY2UY",
            "DiABKAISFwoPRGF5c1RvdGFsVm9sdW1lGA8gASgNIkEKEE1hcmtldERlcHRo",
            "TGV2ZWwSDQoFUHJpY2UYASABKAISDAoEU2l6ZRgCIAEoDRIQCghFeGNoYW5n",
            "ZRgDIAEoCSL3AQoQQm9va0RlcHRoTWVzc2FnZRIRCglUaW1lc3RhbXAYASAB",
            "KAQSMAoLSW5zdHJ1bWVudHMYAiADKAsyGy5zdHJlYW1pbnRlcmZhY2UuSW5z",
            "dHJ1bWVudBI4Cg1CaWRCb29rTGV2ZWxzGAMgAygLMiEuc3RyZWFtaW50ZXJm",
            "YWNlLk1hcmtldERlcHRoTGV2ZWwSOAoNQXNrQm9va0xldmVscxgEIAMoCzIh",
            "LnN0cmVhbWludGVyZmFjZS5NYXJrZXREZXB0aExldmVsEhQKDE51bUJpZExl",
            "dmVscxgFIAEoDRIUCgxOdW1Bc2tMZXZlbHMYBiABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Streaminterface.Instrument), global::Streaminterface.Instrument.Parser, new[]{ "InstrumentType", "UnderlyingSymbol", "ExpirationDay", "ExpirationMonth", "ExpirationYear", "Strike", "IsCallOption" }, null, new[]{ typeof(global::Streaminterface.Instrument.Types.InstrType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Streaminterface.TradeMessage), global::Streaminterface.TradeMessage.Parser, new[]{ "Timestamp", "Instruments", "Price", "Size", "Exchange", "BidPriceBBO", "AskPriceBBO", "BidSizeBBO", "AskSizeBBO", "BidExchangeBBO", "AskExchangeBBO", "DaysHighestPrice", "DaysLowestPrice", "DaysOpeningPrice", "DaysTotalVolume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Streaminterface.MarketDepthLevel), global::Streaminterface.MarketDepthLevel.Parser, new[]{ "Price", "Size", "Exchange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Streaminterface.BookDepthMessage), global::Streaminterface.BookDepthMessage.Parser, new[]{ "Timestamp", "Instruments", "BidBookLevels", "AskBookLevels", "NumBidLevels", "NumAskLevels" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Instrument : pb::IMessage<Instrument> {
    private static readonly pb::MessageParser<Instrument> _parser = new pb::MessageParser<Instrument>(() => new Instrument());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Instrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Streaminterface.MktdataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument(Instrument other) : this() {
      instrumentType_ = other.instrumentType_;
      underlyingSymbol_ = other.underlyingSymbol_;
      expirationDay_ = other.expirationDay_;
      expirationMonth_ = other.expirationMonth_;
      expirationYear_ = other.expirationYear_;
      strike_ = other.strike_;
      isCallOption_ = other.isCallOption_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instrument Clone() {
      return new Instrument(this);
    }

    /// <summary>Field number for the "InstrumentType" field.</summary>
    public const int InstrumentTypeFieldNumber = 1;
    private global::Streaminterface.Instrument.Types.InstrType instrumentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Streaminterface.Instrument.Types.InstrType InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = value;
      }
    }

    /// <summary>Field number for the "UnderlyingSymbol" field.</summary>
    public const int UnderlyingSymbolFieldNumber = 2;
    private string underlyingSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnderlyingSymbol {
      get { return underlyingSymbol_; }
      set {
        underlyingSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExpirationDay" field.</summary>
    public const int ExpirationDayFieldNumber = 3;
    private int expirationDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpirationDay {
      get { return expirationDay_; }
      set {
        expirationDay_ = value;
      }
    }

    /// <summary>Field number for the "ExpirationMonth" field.</summary>
    public const int ExpirationMonthFieldNumber = 4;
    private int expirationMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpirationMonth {
      get { return expirationMonth_; }
      set {
        expirationMonth_ = value;
      }
    }

    /// <summary>Field number for the "ExpirationYear" field.</summary>
    public const int ExpirationYearFieldNumber = 5;
    private int expirationYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpirationYear {
      get { return expirationYear_; }
      set {
        expirationYear_ = value;
      }
    }

    /// <summary>Field number for the "Strike" field.</summary>
    public const int StrikeFieldNumber = 6;
    private float strike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "IsCallOption" field.</summary>
    public const int IsCallOptionFieldNumber = 7;
    private bool isCallOption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCallOption {
      get { return isCallOption_; }
      set {
        isCallOption_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Instrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Instrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentType != other.InstrumentType) return false;
      if (UnderlyingSymbol != other.UnderlyingSymbol) return false;
      if (ExpirationDay != other.ExpirationDay) return false;
      if (ExpirationMonth != other.ExpirationMonth) return false;
      if (ExpirationYear != other.ExpirationYear) return false;
      if (Strike != other.Strike) return false;
      if (IsCallOption != other.IsCallOption) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentType != 0) hash ^= InstrumentType.GetHashCode();
      if (UnderlyingSymbol.Length != 0) hash ^= UnderlyingSymbol.GetHashCode();
      if (ExpirationDay != 0) hash ^= ExpirationDay.GetHashCode();
      if (ExpirationMonth != 0) hash ^= ExpirationMonth.GetHashCode();
      if (ExpirationYear != 0) hash ^= ExpirationYear.GetHashCode();
      if (Strike != 0F) hash ^= Strike.GetHashCode();
      if (IsCallOption != false) hash ^= IsCallOption.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstrumentType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentType);
      }
      if (UnderlyingSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnderlyingSymbol);
      }
      if (ExpirationDay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExpirationDay);
      }
      if (ExpirationMonth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExpirationMonth);
      }
      if (ExpirationYear != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExpirationYear);
      }
      if (Strike != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Strike);
      }
      if (IsCallOption != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsCallOption);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentType);
      }
      if (UnderlyingSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnderlyingSymbol);
      }
      if (ExpirationDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirationDay);
      }
      if (ExpirationMonth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirationMonth);
      }
      if (ExpirationYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpirationYear);
      }
      if (Strike != 0F) {
        size += 1 + 4;
      }
      if (IsCallOption != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Instrument other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentType != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.UnderlyingSymbol.Length != 0) {
        UnderlyingSymbol = other.UnderlyingSymbol;
      }
      if (other.ExpirationDay != 0) {
        ExpirationDay = other.ExpirationDay;
      }
      if (other.ExpirationMonth != 0) {
        ExpirationMonth = other.ExpirationMonth;
      }
      if (other.ExpirationYear != 0) {
        ExpirationYear = other.ExpirationYear;
      }
      if (other.Strike != 0F) {
        Strike = other.Strike;
      }
      if (other.IsCallOption != false) {
        IsCallOption = other.IsCallOption;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            instrumentType_ = (global::Streaminterface.Instrument.Types.InstrType) input.ReadEnum();
            break;
          }
          case 18: {
            UnderlyingSymbol = input.ReadString();
            break;
          }
          case 24: {
            ExpirationDay = input.ReadInt32();
            break;
          }
          case 32: {
            ExpirationMonth = input.ReadInt32();
            break;
          }
          case 40: {
            ExpirationYear = input.ReadInt32();
            break;
          }
          case 53: {
            Strike = input.ReadFloat();
            break;
          }
          case 56: {
            IsCallOption = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Instrument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InstrType {
        [pbr::OriginalName("EQUITY")] Equity = 0,
        [pbr::OriginalName("OPTION")] Option = 1,
        [pbr::OriginalName("FUTURE")] Future = 2,
      }

    }
    #endregion

  }

  public sealed partial class TradeMessage : pb::IMessage<TradeMessage> {
    private static readonly pb::MessageParser<TradeMessage> _parser = new pb::MessageParser<TradeMessage>(() => new TradeMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Streaminterface.MktdataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeMessage(TradeMessage other) : this() {
      timestamp_ = other.timestamp_;
      instruments_ = other.instruments_.Clone();
      price_ = other.price_;
      size_ = other.size_;
      exchange_ = other.exchange_;
      bidPriceBBO_ = other.bidPriceBBO_;
      askPriceBBO_ = other.askPriceBBO_;
      bidSizeBBO_ = other.bidSizeBBO_;
      askSizeBBO_ = other.askSizeBBO_;
      bidExchangeBBO_ = other.bidExchangeBBO_;
      askExchangeBBO_ = other.askExchangeBBO_;
      daysHighestPrice_ = other.daysHighestPrice_;
      daysLowestPrice_ = other.daysLowestPrice_;
      daysOpeningPrice_ = other.daysOpeningPrice_;
      daysTotalVolume_ = other.daysTotalVolume_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeMessage Clone() {
      return new TradeMessage(this);
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Instruments" field.</summary>
    public const int InstrumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Streaminterface.Instrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(18, global::Streaminterface.Instrument.Parser);
    private readonly pbc::RepeatedField<global::Streaminterface.Instrument> instruments_ = new pbc::RepeatedField<global::Streaminterface.Instrument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Streaminterface.Instrument> Instruments {
      get { return instruments_; }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 3;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 4;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BidPriceBBO" field.</summary>
    public const int BidPriceBBOFieldNumber = 6;
    private float bidPriceBBO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BidPriceBBO {
      get { return bidPriceBBO_; }
      set {
        bidPriceBBO_ = value;
      }
    }

    /// <summary>Field number for the "AskPriceBBO" field.</summary>
    public const int AskPriceBBOFieldNumber = 7;
    private float askPriceBBO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AskPriceBBO {
      get { return askPriceBBO_; }
      set {
        askPriceBBO_ = value;
      }
    }

    /// <summary>Field number for the "BidSizeBBO" field.</summary>
    public const int BidSizeBBOFieldNumber = 8;
    private uint bidSizeBBO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BidSizeBBO {
      get { return bidSizeBBO_; }
      set {
        bidSizeBBO_ = value;
      }
    }

    /// <summary>Field number for the "AskSizeBBO" field.</summary>
    public const int AskSizeBBOFieldNumber = 9;
    private uint askSizeBBO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AskSizeBBO {
      get { return askSizeBBO_; }
      set {
        askSizeBBO_ = value;
      }
    }

    /// <summary>Field number for the "BidExchangeBBO" field.</summary>
    public const int BidExchangeBBOFieldNumber = 10;
    private string bidExchangeBBO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BidExchangeBBO {
      get { return bidExchangeBBO_; }
      set {
        bidExchangeBBO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AskExchangeBBO" field.</summary>
    public const int AskExchangeBBOFieldNumber = 11;
    private string askExchangeBBO_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AskExchangeBBO {
      get { return askExchangeBBO_; }
      set {
        askExchangeBBO_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DaysHighestPrice" field.</summary>
    public const int DaysHighestPriceFieldNumber = 12;
    private float daysHighestPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DaysHighestPrice {
      get { return daysHighestPrice_; }
      set {
        daysHighestPrice_ = value;
      }
    }

    /// <summary>Field number for the "DaysLowestPrice" field.</summary>
    public const int DaysLowestPriceFieldNumber = 13;
    private float daysLowestPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DaysLowestPrice {
      get { return daysLowestPrice_; }
      set {
        daysLowestPrice_ = value;
      }
    }

    /// <summary>Field number for the "DaysOpeningPrice" field.</summary>
    public const int DaysOpeningPriceFieldNumber = 14;
    private float daysOpeningPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DaysOpeningPrice {
      get { return daysOpeningPrice_; }
      set {
        daysOpeningPrice_ = value;
      }
    }

    /// <summary>Field number for the "DaysTotalVolume" field.</summary>
    public const int DaysTotalVolumeFieldNumber = 15;
    private uint daysTotalVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DaysTotalVolume {
      get { return daysTotalVolume_; }
      set {
        daysTotalVolume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if(!instruments_.Equals(other.instruments_)) return false;
      if (Price != other.Price) return false;
      if (Size != other.Size) return false;
      if (Exchange != other.Exchange) return false;
      if (BidPriceBBO != other.BidPriceBBO) return false;
      if (AskPriceBBO != other.AskPriceBBO) return false;
      if (BidSizeBBO != other.BidSizeBBO) return false;
      if (AskSizeBBO != other.AskSizeBBO) return false;
      if (BidExchangeBBO != other.BidExchangeBBO) return false;
      if (AskExchangeBBO != other.AskExchangeBBO) return false;
      if (DaysHighestPrice != other.DaysHighestPrice) return false;
      if (DaysLowestPrice != other.DaysLowestPrice) return false;
      if (DaysOpeningPrice != other.DaysOpeningPrice) return false;
      if (DaysTotalVolume != other.DaysTotalVolume) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      hash ^= instruments_.GetHashCode();
      if (Price != 0F) hash ^= Price.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (BidPriceBBO != 0F) hash ^= BidPriceBBO.GetHashCode();
      if (AskPriceBBO != 0F) hash ^= AskPriceBBO.GetHashCode();
      if (BidSizeBBO != 0) hash ^= BidSizeBBO.GetHashCode();
      if (AskSizeBBO != 0) hash ^= AskSizeBBO.GetHashCode();
      if (BidExchangeBBO.Length != 0) hash ^= BidExchangeBBO.GetHashCode();
      if (AskExchangeBBO.Length != 0) hash ^= AskExchangeBBO.GetHashCode();
      if (DaysHighestPrice != 0F) hash ^= DaysHighestPrice.GetHashCode();
      if (DaysLowestPrice != 0F) hash ^= DaysLowestPrice.GetHashCode();
      if (DaysOpeningPrice != 0F) hash ^= DaysOpeningPrice.GetHashCode();
      if (DaysTotalVolume != 0) hash ^= DaysTotalVolume.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (Price != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Price);
      }
      if (Size != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Size);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (BidPriceBBO != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BidPriceBBO);
      }
      if (AskPriceBBO != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(AskPriceBBO);
      }
      if (BidSizeBBO != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BidSizeBBO);
      }
      if (AskSizeBBO != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AskSizeBBO);
      }
      if (BidExchangeBBO.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BidExchangeBBO);
      }
      if (AskExchangeBBO.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(AskExchangeBBO);
      }
      if (DaysHighestPrice != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DaysHighestPrice);
      }
      if (DaysLowestPrice != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DaysLowestPrice);
      }
      if (DaysOpeningPrice != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(DaysOpeningPrice);
      }
      if (DaysTotalVolume != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(DaysTotalVolume);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (BidPriceBBO != 0F) {
        size += 1 + 4;
      }
      if (AskPriceBBO != 0F) {
        size += 1 + 4;
      }
      if (BidSizeBBO != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BidSizeBBO);
      }
      if (AskSizeBBO != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AskSizeBBO);
      }
      if (BidExchangeBBO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BidExchangeBBO);
      }
      if (AskExchangeBBO.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AskExchangeBBO);
      }
      if (DaysHighestPrice != 0F) {
        size += 1 + 4;
      }
      if (DaysLowestPrice != 0F) {
        size += 1 + 4;
      }
      if (DaysOpeningPrice != 0F) {
        size += 1 + 4;
      }
      if (DaysTotalVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DaysTotalVolume);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeMessage other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      instruments_.Add(other.instruments_);
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.BidPriceBBO != 0F) {
        BidPriceBBO = other.BidPriceBBO;
      }
      if (other.AskPriceBBO != 0F) {
        AskPriceBBO = other.AskPriceBBO;
      }
      if (other.BidSizeBBO != 0) {
        BidSizeBBO = other.BidSizeBBO;
      }
      if (other.AskSizeBBO != 0) {
        AskSizeBBO = other.AskSizeBBO;
      }
      if (other.BidExchangeBBO.Length != 0) {
        BidExchangeBBO = other.BidExchangeBBO;
      }
      if (other.AskExchangeBBO.Length != 0) {
        AskExchangeBBO = other.AskExchangeBBO;
      }
      if (other.DaysHighestPrice != 0F) {
        DaysHighestPrice = other.DaysHighestPrice;
      }
      if (other.DaysLowestPrice != 0F) {
        DaysLowestPrice = other.DaysLowestPrice;
      }
      if (other.DaysOpeningPrice != 0F) {
        DaysOpeningPrice = other.DaysOpeningPrice;
      }
      if (other.DaysTotalVolume != 0) {
        DaysTotalVolume = other.DaysTotalVolume;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 18: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
          case 29: {
            Price = input.ReadFloat();
            break;
          }
          case 32: {
            Size = input.ReadUInt32();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
          case 53: {
            BidPriceBBO = input.ReadFloat();
            break;
          }
          case 61: {
            AskPriceBBO = input.ReadFloat();
            break;
          }
          case 64: {
            BidSizeBBO = input.ReadUInt32();
            break;
          }
          case 72: {
            AskSizeBBO = input.ReadUInt32();
            break;
          }
          case 82: {
            BidExchangeBBO = input.ReadString();
            break;
          }
          case 90: {
            AskExchangeBBO = input.ReadString();
            break;
          }
          case 101: {
            DaysHighestPrice = input.ReadFloat();
            break;
          }
          case 109: {
            DaysLowestPrice = input.ReadFloat();
            break;
          }
          case 117: {
            DaysOpeningPrice = input.ReadFloat();
            break;
          }
          case 120: {
            DaysTotalVolume = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarketDepthLevel : pb::IMessage<MarketDepthLevel> {
    private static readonly pb::MessageParser<MarketDepthLevel> _parser = new pb::MessageParser<MarketDepthLevel>(() => new MarketDepthLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDepthLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Streaminterface.MktdataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthLevel(MarketDepthLevel other) : this() {
      price_ = other.price_;
      size_ = other.size_;
      exchange_ = other.exchange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDepthLevel Clone() {
      return new MarketDepthLevel(this);
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 1;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 2;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Exchange" field.</summary>
    public const int ExchangeFieldNumber = 3;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDepthLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDepthLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Price != other.Price) return false;
      if (Size != other.Size) return false;
      if (Exchange != other.Exchange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Price != 0F) hash ^= Price.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Price != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Price);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Size);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Exchange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDepthLevel other) {
      if (other == null) {
        return;
      }
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Price = input.ReadFloat();
            break;
          }
          case 16: {
            Size = input.ReadUInt32();
            break;
          }
          case 26: {
            Exchange = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BookDepthMessage : pb::IMessage<BookDepthMessage> {
    private static readonly pb::MessageParser<BookDepthMessage> _parser = new pb::MessageParser<BookDepthMessage>(() => new BookDepthMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BookDepthMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Streaminterface.MktdataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookDepthMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookDepthMessage(BookDepthMessage other) : this() {
      timestamp_ = other.timestamp_;
      instruments_ = other.instruments_.Clone();
      bidBookLevels_ = other.bidBookLevels_.Clone();
      askBookLevels_ = other.askBookLevels_.Clone();
      numBidLevels_ = other.numBidLevels_;
      numAskLevels_ = other.numAskLevels_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookDepthMessage Clone() {
      return new BookDepthMessage(this);
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Instruments" field.</summary>
    public const int InstrumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Streaminterface.Instrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(18, global::Streaminterface.Instrument.Parser);
    private readonly pbc::RepeatedField<global::Streaminterface.Instrument> instruments_ = new pbc::RepeatedField<global::Streaminterface.Instrument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Streaminterface.Instrument> Instruments {
      get { return instruments_; }
    }

    /// <summary>Field number for the "BidBookLevels" field.</summary>
    public const int BidBookLevelsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Streaminterface.MarketDepthLevel> _repeated_bidBookLevels_codec
        = pb::FieldCodec.ForMessage(26, global::Streaminterface.MarketDepthLevel.Parser);
    private readonly pbc::RepeatedField<global::Streaminterface.MarketDepthLevel> bidBookLevels_ = new pbc::RepeatedField<global::Streaminterface.MarketDepthLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Streaminterface.MarketDepthLevel> BidBookLevels {
      get { return bidBookLevels_; }
    }

    /// <summary>Field number for the "AskBookLevels" field.</summary>
    public const int AskBookLevelsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Streaminterface.MarketDepthLevel> _repeated_askBookLevels_codec
        = pb::FieldCodec.ForMessage(34, global::Streaminterface.MarketDepthLevel.Parser);
    private readonly pbc::RepeatedField<global::Streaminterface.MarketDepthLevel> askBookLevels_ = new pbc::RepeatedField<global::Streaminterface.MarketDepthLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Streaminterface.MarketDepthLevel> AskBookLevels {
      get { return askBookLevels_; }
    }

    /// <summary>Field number for the "NumBidLevels" field.</summary>
    public const int NumBidLevelsFieldNumber = 5;
    private uint numBidLevels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumBidLevels {
      get { return numBidLevels_; }
      set {
        numBidLevels_ = value;
      }
    }

    /// <summary>Field number for the "NumAskLevels" field.</summary>
    public const int NumAskLevelsFieldNumber = 6;
    private uint numAskLevels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumAskLevels {
      get { return numAskLevels_; }
      set {
        numAskLevels_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BookDepthMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BookDepthMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if(!instruments_.Equals(other.instruments_)) return false;
      if(!bidBookLevels_.Equals(other.bidBookLevels_)) return false;
      if(!askBookLevels_.Equals(other.askBookLevels_)) return false;
      if (NumBidLevels != other.NumBidLevels) return false;
      if (NumAskLevels != other.NumAskLevels) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      hash ^= instruments_.GetHashCode();
      hash ^= bidBookLevels_.GetHashCode();
      hash ^= askBookLevels_.GetHashCode();
      if (NumBidLevels != 0) hash ^= NumBidLevels.GetHashCode();
      if (NumAskLevels != 0) hash ^= NumAskLevels.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      instruments_.WriteTo(output, _repeated_instruments_codec);
      bidBookLevels_.WriteTo(output, _repeated_bidBookLevels_codec);
      askBookLevels_.WriteTo(output, _repeated_askBookLevels_codec);
      if (NumBidLevels != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumBidLevels);
      }
      if (NumAskLevels != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumAskLevels);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      size += bidBookLevels_.CalculateSize(_repeated_bidBookLevels_codec);
      size += askBookLevels_.CalculateSize(_repeated_askBookLevels_codec);
      if (NumBidLevels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumBidLevels);
      }
      if (NumAskLevels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumAskLevels);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BookDepthMessage other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      instruments_.Add(other.instruments_);
      bidBookLevels_.Add(other.bidBookLevels_);
      askBookLevels_.Add(other.askBookLevels_);
      if (other.NumBidLevels != 0) {
        NumBidLevels = other.NumBidLevels;
      }
      if (other.NumAskLevels != 0) {
        NumAskLevels = other.NumAskLevels;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 18: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
          case 26: {
            bidBookLevels_.AddEntriesFrom(input, _repeated_bidBookLevels_codec);
            break;
          }
          case 34: {
            askBookLevels_.AddEntriesFrom(input, _repeated_askBookLevels_codec);
            break;
          }
          case 40: {
            NumBidLevels = input.ReadUInt32();
            break;
          }
          case 48: {
            NumAskLevels = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
