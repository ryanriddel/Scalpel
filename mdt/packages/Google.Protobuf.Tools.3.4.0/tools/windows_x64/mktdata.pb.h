// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mktdata.proto

#ifndef PROTOBUF_mktdata_2eproto__INCLUDED
#define PROTOBUF_mktdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace streaminterface {
class BookDepthMessage;
class BookDepthMessageDefaultTypeInternal;
extern BookDepthMessageDefaultTypeInternal _BookDepthMessage_default_instance_;
class DebugInfo;
class DebugInfoDefaultTypeInternal;
extern DebugInfoDefaultTypeInternal _DebugInfo_default_instance_;
class Instrument;
class InstrumentDefaultTypeInternal;
extern InstrumentDefaultTypeInternal _Instrument_default_instance_;
class MarketDepthLevel;
class MarketDepthLevelDefaultTypeInternal;
extern MarketDepthLevelDefaultTypeInternal _MarketDepthLevel_default_instance_;
class TradeMessage;
class TradeMessageDefaultTypeInternal;
extern TradeMessageDefaultTypeInternal _TradeMessage_default_instance_;
}  // namespace streaminterface

namespace streaminterface {

namespace protobuf_mktdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mktdata_2eproto

enum Instrument_InstrType {
  Instrument_InstrType_EQUITY = 0,
  Instrument_InstrType_OPTION = 1,
  Instrument_InstrType_FUTURE = 2,
  Instrument_InstrType_Instrument_InstrType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Instrument_InstrType_Instrument_InstrType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Instrument_InstrType_IsValid(int value);
const Instrument_InstrType Instrument_InstrType_InstrType_MIN = Instrument_InstrType_EQUITY;
const Instrument_InstrType Instrument_InstrType_InstrType_MAX = Instrument_InstrType_FUTURE;
const int Instrument_InstrType_InstrType_ARRAYSIZE = Instrument_InstrType_InstrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Instrument_InstrType_descriptor();
inline const ::std::string& Instrument_InstrType_Name(Instrument_InstrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Instrument_InstrType_descriptor(), value);
}
inline bool Instrument_InstrType_Parse(
    const ::std::string& name, Instrument_InstrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Instrument_InstrType>(
    Instrument_InstrType_descriptor(), name, value);
}
// ===================================================================

class Instrument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streaminterface.Instrument) */ {
 public:
  Instrument();
  virtual ~Instrument();

  Instrument(const Instrument& from);

  inline Instrument& operator=(const Instrument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Instrument(Instrument&& from) noexcept
    : Instrument() {
    *this = ::std::move(from);
  }

  inline Instrument& operator=(Instrument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Instrument& default_instance();

  static inline const Instrument* internal_default_instance() {
    return reinterpret_cast<const Instrument*>(
               &_Instrument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Instrument* other);
  void Swap(Instrument* other);
  friend void swap(Instrument& a, Instrument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Instrument* New() const PROTOBUF_FINAL { return New(NULL); }

  Instrument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Instrument& from);
  void MergeFrom(const Instrument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Instrument* other);
  protected:
  explicit Instrument(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Instrument_InstrType InstrType;
  static const InstrType EQUITY =
    Instrument_InstrType_EQUITY;
  static const InstrType OPTION =
    Instrument_InstrType_OPTION;
  static const InstrType FUTURE =
    Instrument_InstrType_FUTURE;
  static inline bool InstrType_IsValid(int value) {
    return Instrument_InstrType_IsValid(value);
  }
  static const InstrType InstrType_MIN =
    Instrument_InstrType_InstrType_MIN;
  static const InstrType InstrType_MAX =
    Instrument_InstrType_InstrType_MAX;
  static const int InstrType_ARRAYSIZE =
    Instrument_InstrType_InstrType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InstrType_descriptor() {
    return Instrument_InstrType_descriptor();
  }
  static inline const ::std::string& InstrType_Name(InstrType value) {
    return Instrument_InstrType_Name(value);
  }
  static inline bool InstrType_Parse(const ::std::string& name,
      InstrType* value) {
    return Instrument_InstrType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string UnderlyingSymbol = 2;
  void clear_underlyingsymbol();
  static const int kUnderlyingSymbolFieldNumber = 2;
  const ::std::string& underlyingsymbol() const;
  void set_underlyingsymbol(const ::std::string& value);
  #if LANG_CXX11
  void set_underlyingsymbol(::std::string&& value);
  #endif
  void set_underlyingsymbol(const char* value);
  void set_underlyingsymbol(const char* value, size_t size);
  ::std::string* mutable_underlyingsymbol();
  ::std::string* release_underlyingsymbol();
  void set_allocated_underlyingsymbol(::std::string* underlyingsymbol);
  ::std::string* unsafe_arena_release_underlyingsymbol();
  void unsafe_arena_set_allocated_underlyingsymbol(
      ::std::string* underlyingsymbol);

  // .streaminterface.Instrument.InstrType InstrumentType = 1;
  void clear_instrumenttype();
  static const int kInstrumentTypeFieldNumber = 1;
  ::streaminterface::Instrument_InstrType instrumenttype() const;
  void set_instrumenttype(::streaminterface::Instrument_InstrType value);

  // int32 ExpirationDay = 3;
  void clear_expirationday();
  static const int kExpirationDayFieldNumber = 3;
  ::google::protobuf::int32 expirationday() const;
  void set_expirationday(::google::protobuf::int32 value);

  // int32 ExpirationMonth = 4;
  void clear_expirationmonth();
  static const int kExpirationMonthFieldNumber = 4;
  ::google::protobuf::int32 expirationmonth() const;
  void set_expirationmonth(::google::protobuf::int32 value);

  // int32 ExpirationYear = 5;
  void clear_expirationyear();
  static const int kExpirationYearFieldNumber = 5;
  ::google::protobuf::int32 expirationyear() const;
  void set_expirationyear(::google::protobuf::int32 value);

  // float Strike = 6;
  void clear_strike();
  static const int kStrikeFieldNumber = 6;
  float strike() const;
  void set_strike(float value);

  // bool IsCallOption = 7;
  void clear_iscalloption();
  static const int kIsCallOptionFieldNumber = 7;
  bool iscalloption() const;
  void set_iscalloption(bool value);

  // @@protoc_insertion_point(class_scope:streaminterface.Instrument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr underlyingsymbol_;
  int instrumenttype_;
  ::google::protobuf::int32 expirationday_;
  ::google::protobuf::int32 expirationmonth_;
  ::google::protobuf::int32 expirationyear_;
  float strike_;
  bool iscalloption_;
  mutable int _cached_size_;
  friend struct protobuf_mktdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TradeMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streaminterface.TradeMessage) */ {
 public:
  TradeMessage();
  virtual ~TradeMessage();

  TradeMessage(const TradeMessage& from);

  inline TradeMessage& operator=(const TradeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradeMessage(TradeMessage&& from) noexcept
    : TradeMessage() {
    *this = ::std::move(from);
  }

  inline TradeMessage& operator=(TradeMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeMessage& default_instance();

  static inline const TradeMessage* internal_default_instance() {
    return reinterpret_cast<const TradeMessage*>(
               &_TradeMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(TradeMessage* other);
  void Swap(TradeMessage* other);
  friend void swap(TradeMessage& a, TradeMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TradeMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TradeMessage& from);
  void MergeFrom(const TradeMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TradeMessage* other);
  protected:
  explicit TradeMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .streaminterface.Instrument Instruments = 2;
  int instruments_size() const;
  void clear_instruments();
  static const int kInstrumentsFieldNumber = 2;
  const ::streaminterface::Instrument& instruments(int index) const;
  ::streaminterface::Instrument* mutable_instruments(int index);
  ::streaminterface::Instrument* add_instruments();
  ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument >*
      mutable_instruments();
  const ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument >&
      instruments() const;

  // string Exchange = 5;
  void clear_exchange();
  static const int kExchangeFieldNumber = 5;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // string BidExchangeBBO = 10;
  void clear_bidexchangebbo();
  static const int kBidExchangeBBOFieldNumber = 10;
  const ::std::string& bidexchangebbo() const;
  void set_bidexchangebbo(const ::std::string& value);
  #if LANG_CXX11
  void set_bidexchangebbo(::std::string&& value);
  #endif
  void set_bidexchangebbo(const char* value);
  void set_bidexchangebbo(const char* value, size_t size);
  ::std::string* mutable_bidexchangebbo();
  ::std::string* release_bidexchangebbo();
  void set_allocated_bidexchangebbo(::std::string* bidexchangebbo);
  ::std::string* unsafe_arena_release_bidexchangebbo();
  void unsafe_arena_set_allocated_bidexchangebbo(
      ::std::string* bidexchangebbo);

  // string AskExchangeBBO = 11;
  void clear_askexchangebbo();
  static const int kAskExchangeBBOFieldNumber = 11;
  const ::std::string& askexchangebbo() const;
  void set_askexchangebbo(const ::std::string& value);
  #if LANG_CXX11
  void set_askexchangebbo(::std::string&& value);
  #endif
  void set_askexchangebbo(const char* value);
  void set_askexchangebbo(const char* value, size_t size);
  ::std::string* mutable_askexchangebbo();
  ::std::string* release_askexchangebbo();
  void set_allocated_askexchangebbo(::std::string* askexchangebbo);
  ::std::string* unsafe_arena_release_askexchangebbo();
  void unsafe_arena_set_allocated_askexchangebbo(
      ::std::string* askexchangebbo);

  // uint64 Timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // float Price = 3;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  float price() const;
  void set_price(float value);

  // uint32 Size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // float BidPriceBBO = 6;
  void clear_bidpricebbo();
  static const int kBidPriceBBOFieldNumber = 6;
  float bidpricebbo() const;
  void set_bidpricebbo(float value);

  // float AskPriceBBO = 7;
  void clear_askpricebbo();
  static const int kAskPriceBBOFieldNumber = 7;
  float askpricebbo() const;
  void set_askpricebbo(float value);

  // uint32 BidSizeBBO = 8;
  void clear_bidsizebbo();
  static const int kBidSizeBBOFieldNumber = 8;
  ::google::protobuf::uint32 bidsizebbo() const;
  void set_bidsizebbo(::google::protobuf::uint32 value);

  // uint32 AskSizeBBO = 9;
  void clear_asksizebbo();
  static const int kAskSizeBBOFieldNumber = 9;
  ::google::protobuf::uint32 asksizebbo() const;
  void set_asksizebbo(::google::protobuf::uint32 value);

  // float DaysHighestPrice = 12;
  void clear_dayshighestprice();
  static const int kDaysHighestPriceFieldNumber = 12;
  float dayshighestprice() const;
  void set_dayshighestprice(float value);

  // float DaysLowestPrice = 13;
  void clear_dayslowestprice();
  static const int kDaysLowestPriceFieldNumber = 13;
  float dayslowestprice() const;
  void set_dayslowestprice(float value);

  // float DaysOpeningPrice = 14;
  void clear_daysopeningprice();
  static const int kDaysOpeningPriceFieldNumber = 14;
  float daysopeningprice() const;
  void set_daysopeningprice(float value);

  // uint32 DaysTotalVolume = 15;
  void clear_daystotalvolume();
  static const int kDaysTotalVolumeFieldNumber = 15;
  ::google::protobuf::uint32 daystotalvolume() const;
  void set_daystotalvolume(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:streaminterface.TradeMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument > instruments_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr bidexchangebbo_;
  ::google::protobuf::internal::ArenaStringPtr askexchangebbo_;
  ::google::protobuf::uint64 timestamp_;
  float price_;
  ::google::protobuf::uint32 size_;
  float bidpricebbo_;
  float askpricebbo_;
  ::google::protobuf::uint32 bidsizebbo_;
  ::google::protobuf::uint32 asksizebbo_;
  float dayshighestprice_;
  float dayslowestprice_;
  float daysopeningprice_;
  ::google::protobuf::uint32 daystotalvolume_;
  mutable int _cached_size_;
  friend struct protobuf_mktdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarketDepthLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streaminterface.MarketDepthLevel) */ {
 public:
  MarketDepthLevel();
  virtual ~MarketDepthLevel();

  MarketDepthLevel(const MarketDepthLevel& from);

  inline MarketDepthLevel& operator=(const MarketDepthLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketDepthLevel(MarketDepthLevel&& from) noexcept
    : MarketDepthLevel() {
    *this = ::std::move(from);
  }

  inline MarketDepthLevel& operator=(MarketDepthLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketDepthLevel& default_instance();

  static inline const MarketDepthLevel* internal_default_instance() {
    return reinterpret_cast<const MarketDepthLevel*>(
               &_MarketDepthLevel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(MarketDepthLevel* other);
  void Swap(MarketDepthLevel* other);
  friend void swap(MarketDepthLevel& a, MarketDepthLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketDepthLevel* New() const PROTOBUF_FINAL { return New(NULL); }

  MarketDepthLevel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarketDepthLevel& from);
  void MergeFrom(const MarketDepthLevel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarketDepthLevel* other);
  protected:
  explicit MarketDepthLevel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // float Price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  float price() const;
  void set_price(float value);

  // uint32 Size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:streaminterface.MarketDepthLevel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  float price_;
  ::google::protobuf::uint32 size_;
  mutable int _cached_size_;
  friend struct protobuf_mktdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BookDepthMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streaminterface.BookDepthMessage) */ {
 public:
  BookDepthMessage();
  virtual ~BookDepthMessage();

  BookDepthMessage(const BookDepthMessage& from);

  inline BookDepthMessage& operator=(const BookDepthMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BookDepthMessage(BookDepthMessage&& from) noexcept
    : BookDepthMessage() {
    *this = ::std::move(from);
  }

  inline BookDepthMessage& operator=(BookDepthMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BookDepthMessage& default_instance();

  static inline const BookDepthMessage* internal_default_instance() {
    return reinterpret_cast<const BookDepthMessage*>(
               &_BookDepthMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(BookDepthMessage* other);
  void Swap(BookDepthMessage* other);
  friend void swap(BookDepthMessage& a, BookDepthMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BookDepthMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  BookDepthMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BookDepthMessage& from);
  void MergeFrom(const BookDepthMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BookDepthMessage* other);
  protected:
  explicit BookDepthMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .streaminterface.Instrument Instruments = 2;
  int instruments_size() const;
  void clear_instruments();
  static const int kInstrumentsFieldNumber = 2;
  const ::streaminterface::Instrument& instruments(int index) const;
  ::streaminterface::Instrument* mutable_instruments(int index);
  ::streaminterface::Instrument* add_instruments();
  ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument >*
      mutable_instruments();
  const ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument >&
      instruments() const;

  // repeated .streaminterface.MarketDepthLevel BidBookLevels = 3;
  int bidbooklevels_size() const;
  void clear_bidbooklevels();
  static const int kBidBookLevelsFieldNumber = 3;
  const ::streaminterface::MarketDepthLevel& bidbooklevels(int index) const;
  ::streaminterface::MarketDepthLevel* mutable_bidbooklevels(int index);
  ::streaminterface::MarketDepthLevel* add_bidbooklevels();
  ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel >*
      mutable_bidbooklevels();
  const ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel >&
      bidbooklevels() const;

  // repeated .streaminterface.MarketDepthLevel AskBookLevels = 4;
  int askbooklevels_size() const;
  void clear_askbooklevels();
  static const int kAskBookLevelsFieldNumber = 4;
  const ::streaminterface::MarketDepthLevel& askbooklevels(int index) const;
  ::streaminterface::MarketDepthLevel* mutable_askbooklevels(int index);
  ::streaminterface::MarketDepthLevel* add_askbooklevels();
  ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel >*
      mutable_askbooklevels();
  const ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel >&
      askbooklevels() const;

  // uint64 Timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 NumBidLevels = 5;
  void clear_numbidlevels();
  static const int kNumBidLevelsFieldNumber = 5;
  ::google::protobuf::uint32 numbidlevels() const;
  void set_numbidlevels(::google::protobuf::uint32 value);

  // uint32 NumAskLevels = 6;
  void clear_numasklevels();
  static const int kNumAskLevelsFieldNumber = 6;
  ::google::protobuf::uint32 numasklevels() const;
  void set_numasklevels(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:streaminterface.BookDepthMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument > instruments_;
  ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel > bidbooklevels_;
  ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel > askbooklevels_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 numbidlevels_;
  ::google::protobuf::uint32 numasklevels_;
  mutable int _cached_size_;
  friend struct protobuf_mktdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:streaminterface.DebugInfo) */ {
 public:
  DebugInfo();
  virtual ~DebugInfo();

  DebugInfo(const DebugInfo& from);

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugInfo(DebugInfo&& from) noexcept
    : DebugInfo() {
    *this = ::std::move(from);
  }

  inline DebugInfo& operator=(DebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfo& default_instance();

  static inline const DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DebugInfo*>(
               &_DebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(DebugInfo* other);
  void Swap(DebugInfo* other);
  friend void swap(DebugInfo& a, DebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugInfo* other);
  protected:
  explicit DebugInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Other = 4;
  void clear_other();
  static const int kOtherFieldNumber = 4;
  const ::std::string& other() const;
  void set_other(const ::std::string& value);
  #if LANG_CXX11
  void set_other(::std::string&& value);
  #endif
  void set_other(const char* value);
  void set_other(const char* value, size_t size);
  ::std::string* mutable_other();
  ::std::string* release_other();
  void set_allocated_other(::std::string* other);
  ::std::string* unsafe_arena_release_other();
  void unsafe_arena_set_allocated_other(
      ::std::string* other);

  // uint64 MessageCreatedTimestamp = 1;
  void clear_messagecreatedtimestamp();
  static const int kMessageCreatedTimestampFieldNumber = 1;
  ::google::protobuf::uint64 messagecreatedtimestamp() const;
  void set_messagecreatedtimestamp(::google::protobuf::uint64 value);

  // uint64 MessageSentTimestamp = 2;
  void clear_messagesenttimestamp();
  static const int kMessageSentTimestampFieldNumber = 2;
  ::google::protobuf::uint64 messagesenttimestamp() const;
  void set_messagesenttimestamp(::google::protobuf::uint64 value);

  // uint64 MessageNumber = 3;
  void clear_messagenumber();
  static const int kMessageNumberFieldNumber = 3;
  ::google::protobuf::uint64 messagenumber() const;
  void set_messagenumber(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:streaminterface.DebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr other_;
  ::google::protobuf::uint64 messagecreatedtimestamp_;
  ::google::protobuf::uint64 messagesenttimestamp_;
  ::google::protobuf::uint64 messagenumber_;
  mutable int _cached_size_;
  friend struct protobuf_mktdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Instrument

// .streaminterface.Instrument.InstrType InstrumentType = 1;
inline void Instrument::clear_instrumenttype() {
  instrumenttype_ = 0;
}
inline ::streaminterface::Instrument_InstrType Instrument::instrumenttype() const {
  // @@protoc_insertion_point(field_get:streaminterface.Instrument.InstrumentType)
  return static_cast< ::streaminterface::Instrument_InstrType >(instrumenttype_);
}
inline void Instrument::set_instrumenttype(::streaminterface::Instrument_InstrType value) {
  
  instrumenttype_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.Instrument.InstrumentType)
}

// string UnderlyingSymbol = 2;
inline void Instrument::clear_underlyingsymbol() {
  underlyingsymbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Instrument::underlyingsymbol() const {
  // @@protoc_insertion_point(field_get:streaminterface.Instrument.UnderlyingSymbol)
  return underlyingsymbol_.Get();
}
inline void Instrument::set_underlyingsymbol(const ::std::string& value) {
  
  underlyingsymbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:streaminterface.Instrument.UnderlyingSymbol)
}
#if LANG_CXX11
inline void Instrument::set_underlyingsymbol(::std::string&& value) {
  
  underlyingsymbol_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:streaminterface.Instrument.UnderlyingSymbol)
}
#endif
inline void Instrument::set_underlyingsymbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  underlyingsymbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:streaminterface.Instrument.UnderlyingSymbol)
}
inline void Instrument::set_underlyingsymbol(const char* value,
    size_t size) {
  
  underlyingsymbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:streaminterface.Instrument.UnderlyingSymbol)
}
inline ::std::string* Instrument::mutable_underlyingsymbol() {
  
  // @@protoc_insertion_point(field_mutable:streaminterface.Instrument.UnderlyingSymbol)
  return underlyingsymbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Instrument::release_underlyingsymbol() {
  // @@protoc_insertion_point(field_release:streaminterface.Instrument.UnderlyingSymbol)
  
  return underlyingsymbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Instrument::unsafe_arena_release_underlyingsymbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:streaminterface.Instrument.UnderlyingSymbol)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return underlyingsymbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Instrument::set_allocated_underlyingsymbol(::std::string* underlyingsymbol) {
  if (underlyingsymbol != NULL) {
    
  } else {
    
  }
  underlyingsymbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlyingsymbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:streaminterface.Instrument.UnderlyingSymbol)
}
inline void Instrument::unsafe_arena_set_allocated_underlyingsymbol(
    ::std::string* underlyingsymbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (underlyingsymbol != NULL) {
    
  } else {
    
  }
  underlyingsymbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      underlyingsymbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaminterface.Instrument.UnderlyingSymbol)
}

// int32 ExpirationDay = 3;
inline void Instrument::clear_expirationday() {
  expirationday_ = 0;
}
inline ::google::protobuf::int32 Instrument::expirationday() const {
  // @@protoc_insertion_point(field_get:streaminterface.Instrument.ExpirationDay)
  return expirationday_;
}
inline void Instrument::set_expirationday(::google::protobuf::int32 value) {
  
  expirationday_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.Instrument.ExpirationDay)
}

// int32 ExpirationMonth = 4;
inline void Instrument::clear_expirationmonth() {
  expirationmonth_ = 0;
}
inline ::google::protobuf::int32 Instrument::expirationmonth() const {
  // @@protoc_insertion_point(field_get:streaminterface.Instrument.ExpirationMonth)
  return expirationmonth_;
}
inline void Instrument::set_expirationmonth(::google::protobuf::int32 value) {
  
  expirationmonth_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.Instrument.ExpirationMonth)
}

// int32 ExpirationYear = 5;
inline void Instrument::clear_expirationyear() {
  expirationyear_ = 0;
}
inline ::google::protobuf::int32 Instrument::expirationyear() const {
  // @@protoc_insertion_point(field_get:streaminterface.Instrument.ExpirationYear)
  return expirationyear_;
}
inline void Instrument::set_expirationyear(::google::protobuf::int32 value) {
  
  expirationyear_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.Instrument.ExpirationYear)
}

// float Strike = 6;
inline void Instrument::clear_strike() {
  strike_ = 0;
}
inline float Instrument::strike() const {
  // @@protoc_insertion_point(field_get:streaminterface.Instrument.Strike)
  return strike_;
}
inline void Instrument::set_strike(float value) {
  
  strike_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.Instrument.Strike)
}

// bool IsCallOption = 7;
inline void Instrument::clear_iscalloption() {
  iscalloption_ = false;
}
inline bool Instrument::iscalloption() const {
  // @@protoc_insertion_point(field_get:streaminterface.Instrument.IsCallOption)
  return iscalloption_;
}
inline void Instrument::set_iscalloption(bool value) {
  
  iscalloption_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.Instrument.IsCallOption)
}

// -------------------------------------------------------------------

// TradeMessage

// uint64 Timestamp = 1;
inline void TradeMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TradeMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.Timestamp)
  return timestamp_;
}
inline void TradeMessage::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.Timestamp)
}

// repeated .streaminterface.Instrument Instruments = 2;
inline int TradeMessage::instruments_size() const {
  return instruments_.size();
}
inline void TradeMessage::clear_instruments() {
  instruments_.Clear();
}
inline const ::streaminterface::Instrument& TradeMessage::instruments(int index) const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.Instruments)
  return instruments_.Get(index);
}
inline ::streaminterface::Instrument* TradeMessage::mutable_instruments(int index) {
  // @@protoc_insertion_point(field_mutable:streaminterface.TradeMessage.Instruments)
  return instruments_.Mutable(index);
}
inline ::streaminterface::Instrument* TradeMessage::add_instruments() {
  // @@protoc_insertion_point(field_add:streaminterface.TradeMessage.Instruments)
  return instruments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument >*
TradeMessage::mutable_instruments() {
  // @@protoc_insertion_point(field_mutable_list:streaminterface.TradeMessage.Instruments)
  return &instruments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument >&
TradeMessage::instruments() const {
  // @@protoc_insertion_point(field_list:streaminterface.TradeMessage.Instruments)
  return instruments_;
}

// float Price = 3;
inline void TradeMessage::clear_price() {
  price_ = 0;
}
inline float TradeMessage::price() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.Price)
  return price_;
}
inline void TradeMessage::set_price(float value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.Price)
}

// uint32 Size = 4;
inline void TradeMessage::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 TradeMessage::size() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.Size)
  return size_;
}
inline void TradeMessage::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.Size)
}

// string Exchange = 5;
inline void TradeMessage::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TradeMessage::exchange() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.Exchange)
  return exchange_.Get();
}
inline void TradeMessage::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.Exchange)
}
#if LANG_CXX11
inline void TradeMessage::set_exchange(::std::string&& value) {
  
  exchange_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:streaminterface.TradeMessage.Exchange)
}
#endif
inline void TradeMessage::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:streaminterface.TradeMessage.Exchange)
}
inline void TradeMessage::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:streaminterface.TradeMessage.Exchange)
}
inline ::std::string* TradeMessage::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:streaminterface.TradeMessage.Exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TradeMessage::release_exchange() {
  // @@protoc_insertion_point(field_release:streaminterface.TradeMessage.Exchange)
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TradeMessage::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:streaminterface.TradeMessage.Exchange)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TradeMessage::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:streaminterface.TradeMessage.Exchange)
}
inline void TradeMessage::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaminterface.TradeMessage.Exchange)
}

// float BidPriceBBO = 6;
inline void TradeMessage::clear_bidpricebbo() {
  bidpricebbo_ = 0;
}
inline float TradeMessage::bidpricebbo() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.BidPriceBBO)
  return bidpricebbo_;
}
inline void TradeMessage::set_bidpricebbo(float value) {
  
  bidpricebbo_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.BidPriceBBO)
}

// float AskPriceBBO = 7;
inline void TradeMessage::clear_askpricebbo() {
  askpricebbo_ = 0;
}
inline float TradeMessage::askpricebbo() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.AskPriceBBO)
  return askpricebbo_;
}
inline void TradeMessage::set_askpricebbo(float value) {
  
  askpricebbo_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.AskPriceBBO)
}

// uint32 BidSizeBBO = 8;
inline void TradeMessage::clear_bidsizebbo() {
  bidsizebbo_ = 0u;
}
inline ::google::protobuf::uint32 TradeMessage::bidsizebbo() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.BidSizeBBO)
  return bidsizebbo_;
}
inline void TradeMessage::set_bidsizebbo(::google::protobuf::uint32 value) {
  
  bidsizebbo_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.BidSizeBBO)
}

// uint32 AskSizeBBO = 9;
inline void TradeMessage::clear_asksizebbo() {
  asksizebbo_ = 0u;
}
inline ::google::protobuf::uint32 TradeMessage::asksizebbo() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.AskSizeBBO)
  return asksizebbo_;
}
inline void TradeMessage::set_asksizebbo(::google::protobuf::uint32 value) {
  
  asksizebbo_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.AskSizeBBO)
}

// string BidExchangeBBO = 10;
inline void TradeMessage::clear_bidexchangebbo() {
  bidexchangebbo_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TradeMessage::bidexchangebbo() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.BidExchangeBBO)
  return bidexchangebbo_.Get();
}
inline void TradeMessage::set_bidexchangebbo(const ::std::string& value) {
  
  bidexchangebbo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.BidExchangeBBO)
}
#if LANG_CXX11
inline void TradeMessage::set_bidexchangebbo(::std::string&& value) {
  
  bidexchangebbo_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:streaminterface.TradeMessage.BidExchangeBBO)
}
#endif
inline void TradeMessage::set_bidexchangebbo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bidexchangebbo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:streaminterface.TradeMessage.BidExchangeBBO)
}
inline void TradeMessage::set_bidexchangebbo(const char* value,
    size_t size) {
  
  bidexchangebbo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:streaminterface.TradeMessage.BidExchangeBBO)
}
inline ::std::string* TradeMessage::mutable_bidexchangebbo() {
  
  // @@protoc_insertion_point(field_mutable:streaminterface.TradeMessage.BidExchangeBBO)
  return bidexchangebbo_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TradeMessage::release_bidexchangebbo() {
  // @@protoc_insertion_point(field_release:streaminterface.TradeMessage.BidExchangeBBO)
  
  return bidexchangebbo_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TradeMessage::unsafe_arena_release_bidexchangebbo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:streaminterface.TradeMessage.BidExchangeBBO)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bidexchangebbo_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TradeMessage::set_allocated_bidexchangebbo(::std::string* bidexchangebbo) {
  if (bidexchangebbo != NULL) {
    
  } else {
    
  }
  bidexchangebbo_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bidexchangebbo,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:streaminterface.TradeMessage.BidExchangeBBO)
}
inline void TradeMessage::unsafe_arena_set_allocated_bidexchangebbo(
    ::std::string* bidexchangebbo) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bidexchangebbo != NULL) {
    
  } else {
    
  }
  bidexchangebbo_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bidexchangebbo, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaminterface.TradeMessage.BidExchangeBBO)
}

// string AskExchangeBBO = 11;
inline void TradeMessage::clear_askexchangebbo() {
  askexchangebbo_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& TradeMessage::askexchangebbo() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.AskExchangeBBO)
  return askexchangebbo_.Get();
}
inline void TradeMessage::set_askexchangebbo(const ::std::string& value) {
  
  askexchangebbo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.AskExchangeBBO)
}
#if LANG_CXX11
inline void TradeMessage::set_askexchangebbo(::std::string&& value) {
  
  askexchangebbo_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:streaminterface.TradeMessage.AskExchangeBBO)
}
#endif
inline void TradeMessage::set_askexchangebbo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  askexchangebbo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:streaminterface.TradeMessage.AskExchangeBBO)
}
inline void TradeMessage::set_askexchangebbo(const char* value,
    size_t size) {
  
  askexchangebbo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:streaminterface.TradeMessage.AskExchangeBBO)
}
inline ::std::string* TradeMessage::mutable_askexchangebbo() {
  
  // @@protoc_insertion_point(field_mutable:streaminterface.TradeMessage.AskExchangeBBO)
  return askexchangebbo_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TradeMessage::release_askexchangebbo() {
  // @@protoc_insertion_point(field_release:streaminterface.TradeMessage.AskExchangeBBO)
  
  return askexchangebbo_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* TradeMessage::unsafe_arena_release_askexchangebbo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:streaminterface.TradeMessage.AskExchangeBBO)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return askexchangebbo_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TradeMessage::set_allocated_askexchangebbo(::std::string* askexchangebbo) {
  if (askexchangebbo != NULL) {
    
  } else {
    
  }
  askexchangebbo_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), askexchangebbo,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:streaminterface.TradeMessage.AskExchangeBBO)
}
inline void TradeMessage::unsafe_arena_set_allocated_askexchangebbo(
    ::std::string* askexchangebbo) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (askexchangebbo != NULL) {
    
  } else {
    
  }
  askexchangebbo_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      askexchangebbo, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaminterface.TradeMessage.AskExchangeBBO)
}

// float DaysHighestPrice = 12;
inline void TradeMessage::clear_dayshighestprice() {
  dayshighestprice_ = 0;
}
inline float TradeMessage::dayshighestprice() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.DaysHighestPrice)
  return dayshighestprice_;
}
inline void TradeMessage::set_dayshighestprice(float value) {
  
  dayshighestprice_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.DaysHighestPrice)
}

// float DaysLowestPrice = 13;
inline void TradeMessage::clear_dayslowestprice() {
  dayslowestprice_ = 0;
}
inline float TradeMessage::dayslowestprice() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.DaysLowestPrice)
  return dayslowestprice_;
}
inline void TradeMessage::set_dayslowestprice(float value) {
  
  dayslowestprice_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.DaysLowestPrice)
}

// float DaysOpeningPrice = 14;
inline void TradeMessage::clear_daysopeningprice() {
  daysopeningprice_ = 0;
}
inline float TradeMessage::daysopeningprice() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.DaysOpeningPrice)
  return daysopeningprice_;
}
inline void TradeMessage::set_daysopeningprice(float value) {
  
  daysopeningprice_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.DaysOpeningPrice)
}

// uint32 DaysTotalVolume = 15;
inline void TradeMessage::clear_daystotalvolume() {
  daystotalvolume_ = 0u;
}
inline ::google::protobuf::uint32 TradeMessage::daystotalvolume() const {
  // @@protoc_insertion_point(field_get:streaminterface.TradeMessage.DaysTotalVolume)
  return daystotalvolume_;
}
inline void TradeMessage::set_daystotalvolume(::google::protobuf::uint32 value) {
  
  daystotalvolume_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.TradeMessage.DaysTotalVolume)
}

// -------------------------------------------------------------------

// MarketDepthLevel

// float Price = 1;
inline void MarketDepthLevel::clear_price() {
  price_ = 0;
}
inline float MarketDepthLevel::price() const {
  // @@protoc_insertion_point(field_get:streaminterface.MarketDepthLevel.Price)
  return price_;
}
inline void MarketDepthLevel::set_price(float value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.MarketDepthLevel.Price)
}

// uint32 Size = 2;
inline void MarketDepthLevel::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 MarketDepthLevel::size() const {
  // @@protoc_insertion_point(field_get:streaminterface.MarketDepthLevel.Size)
  return size_;
}
inline void MarketDepthLevel::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.MarketDepthLevel.Size)
}

// string Exchange = 3;
inline void MarketDepthLevel::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MarketDepthLevel::exchange() const {
  // @@protoc_insertion_point(field_get:streaminterface.MarketDepthLevel.Exchange)
  return exchange_.Get();
}
inline void MarketDepthLevel::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:streaminterface.MarketDepthLevel.Exchange)
}
#if LANG_CXX11
inline void MarketDepthLevel::set_exchange(::std::string&& value) {
  
  exchange_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:streaminterface.MarketDepthLevel.Exchange)
}
#endif
inline void MarketDepthLevel::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:streaminterface.MarketDepthLevel.Exchange)
}
inline void MarketDepthLevel::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:streaminterface.MarketDepthLevel.Exchange)
}
inline ::std::string* MarketDepthLevel::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:streaminterface.MarketDepthLevel.Exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MarketDepthLevel::release_exchange() {
  // @@protoc_insertion_point(field_release:streaminterface.MarketDepthLevel.Exchange)
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MarketDepthLevel::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:streaminterface.MarketDepthLevel.Exchange)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MarketDepthLevel::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:streaminterface.MarketDepthLevel.Exchange)
}
inline void MarketDepthLevel::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaminterface.MarketDepthLevel.Exchange)
}

// -------------------------------------------------------------------

// BookDepthMessage

// uint64 Timestamp = 1;
inline void BookDepthMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BookDepthMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:streaminterface.BookDepthMessage.Timestamp)
  return timestamp_;
}
inline void BookDepthMessage::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.BookDepthMessage.Timestamp)
}

// repeated .streaminterface.Instrument Instruments = 2;
inline int BookDepthMessage::instruments_size() const {
  return instruments_.size();
}
inline void BookDepthMessage::clear_instruments() {
  instruments_.Clear();
}
inline const ::streaminterface::Instrument& BookDepthMessage::instruments(int index) const {
  // @@protoc_insertion_point(field_get:streaminterface.BookDepthMessage.Instruments)
  return instruments_.Get(index);
}
inline ::streaminterface::Instrument* BookDepthMessage::mutable_instruments(int index) {
  // @@protoc_insertion_point(field_mutable:streaminterface.BookDepthMessage.Instruments)
  return instruments_.Mutable(index);
}
inline ::streaminterface::Instrument* BookDepthMessage::add_instruments() {
  // @@protoc_insertion_point(field_add:streaminterface.BookDepthMessage.Instruments)
  return instruments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument >*
BookDepthMessage::mutable_instruments() {
  // @@protoc_insertion_point(field_mutable_list:streaminterface.BookDepthMessage.Instruments)
  return &instruments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::streaminterface::Instrument >&
BookDepthMessage::instruments() const {
  // @@protoc_insertion_point(field_list:streaminterface.BookDepthMessage.Instruments)
  return instruments_;
}

// repeated .streaminterface.MarketDepthLevel BidBookLevels = 3;
inline int BookDepthMessage::bidbooklevels_size() const {
  return bidbooklevels_.size();
}
inline void BookDepthMessage::clear_bidbooklevels() {
  bidbooklevels_.Clear();
}
inline const ::streaminterface::MarketDepthLevel& BookDepthMessage::bidbooklevels(int index) const {
  // @@protoc_insertion_point(field_get:streaminterface.BookDepthMessage.BidBookLevels)
  return bidbooklevels_.Get(index);
}
inline ::streaminterface::MarketDepthLevel* BookDepthMessage::mutable_bidbooklevels(int index) {
  // @@protoc_insertion_point(field_mutable:streaminterface.BookDepthMessage.BidBookLevels)
  return bidbooklevels_.Mutable(index);
}
inline ::streaminterface::MarketDepthLevel* BookDepthMessage::add_bidbooklevels() {
  // @@protoc_insertion_point(field_add:streaminterface.BookDepthMessage.BidBookLevels)
  return bidbooklevels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel >*
BookDepthMessage::mutable_bidbooklevels() {
  // @@protoc_insertion_point(field_mutable_list:streaminterface.BookDepthMessage.BidBookLevels)
  return &bidbooklevels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel >&
BookDepthMessage::bidbooklevels() const {
  // @@protoc_insertion_point(field_list:streaminterface.BookDepthMessage.BidBookLevels)
  return bidbooklevels_;
}

// repeated .streaminterface.MarketDepthLevel AskBookLevels = 4;
inline int BookDepthMessage::askbooklevels_size() const {
  return askbooklevels_.size();
}
inline void BookDepthMessage::clear_askbooklevels() {
  askbooklevels_.Clear();
}
inline const ::streaminterface::MarketDepthLevel& BookDepthMessage::askbooklevels(int index) const {
  // @@protoc_insertion_point(field_get:streaminterface.BookDepthMessage.AskBookLevels)
  return askbooklevels_.Get(index);
}
inline ::streaminterface::MarketDepthLevel* BookDepthMessage::mutable_askbooklevels(int index) {
  // @@protoc_insertion_point(field_mutable:streaminterface.BookDepthMessage.AskBookLevels)
  return askbooklevels_.Mutable(index);
}
inline ::streaminterface::MarketDepthLevel* BookDepthMessage::add_askbooklevels() {
  // @@protoc_insertion_point(field_add:streaminterface.BookDepthMessage.AskBookLevels)
  return askbooklevels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel >*
BookDepthMessage::mutable_askbooklevels() {
  // @@protoc_insertion_point(field_mutable_list:streaminterface.BookDepthMessage.AskBookLevels)
  return &askbooklevels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::streaminterface::MarketDepthLevel >&
BookDepthMessage::askbooklevels() const {
  // @@protoc_insertion_point(field_list:streaminterface.BookDepthMessage.AskBookLevels)
  return askbooklevels_;
}

// uint32 NumBidLevels = 5;
inline void BookDepthMessage::clear_numbidlevels() {
  numbidlevels_ = 0u;
}
inline ::google::protobuf::uint32 BookDepthMessage::numbidlevels() const {
  // @@protoc_insertion_point(field_get:streaminterface.BookDepthMessage.NumBidLevels)
  return numbidlevels_;
}
inline void BookDepthMessage::set_numbidlevels(::google::protobuf::uint32 value) {
  
  numbidlevels_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.BookDepthMessage.NumBidLevels)
}

// uint32 NumAskLevels = 6;
inline void BookDepthMessage::clear_numasklevels() {
  numasklevels_ = 0u;
}
inline ::google::protobuf::uint32 BookDepthMessage::numasklevels() const {
  // @@protoc_insertion_point(field_get:streaminterface.BookDepthMessage.NumAskLevels)
  return numasklevels_;
}
inline void BookDepthMessage::set_numasklevels(::google::protobuf::uint32 value) {
  
  numasklevels_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.BookDepthMessage.NumAskLevels)
}

// -------------------------------------------------------------------

// DebugInfo

// uint64 MessageCreatedTimestamp = 1;
inline void DebugInfo::clear_messagecreatedtimestamp() {
  messagecreatedtimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DebugInfo::messagecreatedtimestamp() const {
  // @@protoc_insertion_point(field_get:streaminterface.DebugInfo.MessageCreatedTimestamp)
  return messagecreatedtimestamp_;
}
inline void DebugInfo::set_messagecreatedtimestamp(::google::protobuf::uint64 value) {
  
  messagecreatedtimestamp_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.DebugInfo.MessageCreatedTimestamp)
}

// uint64 MessageSentTimestamp = 2;
inline void DebugInfo::clear_messagesenttimestamp() {
  messagesenttimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DebugInfo::messagesenttimestamp() const {
  // @@protoc_insertion_point(field_get:streaminterface.DebugInfo.MessageSentTimestamp)
  return messagesenttimestamp_;
}
inline void DebugInfo::set_messagesenttimestamp(::google::protobuf::uint64 value) {
  
  messagesenttimestamp_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.DebugInfo.MessageSentTimestamp)
}

// uint64 MessageNumber = 3;
inline void DebugInfo::clear_messagenumber() {
  messagenumber_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DebugInfo::messagenumber() const {
  // @@protoc_insertion_point(field_get:streaminterface.DebugInfo.MessageNumber)
  return messagenumber_;
}
inline void DebugInfo::set_messagenumber(::google::protobuf::uint64 value) {
  
  messagenumber_ = value;
  // @@protoc_insertion_point(field_set:streaminterface.DebugInfo.MessageNumber)
}

// string Other = 4;
inline void DebugInfo::clear_other() {
  other_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DebugInfo::other() const {
  // @@protoc_insertion_point(field_get:streaminterface.DebugInfo.Other)
  return other_.Get();
}
inline void DebugInfo::set_other(const ::std::string& value) {
  
  other_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:streaminterface.DebugInfo.Other)
}
#if LANG_CXX11
inline void DebugInfo::set_other(::std::string&& value) {
  
  other_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:streaminterface.DebugInfo.Other)
}
#endif
inline void DebugInfo::set_other(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  other_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:streaminterface.DebugInfo.Other)
}
inline void DebugInfo::set_other(const char* value,
    size_t size) {
  
  other_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:streaminterface.DebugInfo.Other)
}
inline ::std::string* DebugInfo::mutable_other() {
  
  // @@protoc_insertion_point(field_mutable:streaminterface.DebugInfo.Other)
  return other_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DebugInfo::release_other() {
  // @@protoc_insertion_point(field_release:streaminterface.DebugInfo.Other)
  
  return other_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DebugInfo::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_unsafe_arena_release:streaminterface.DebugInfo.Other)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return other_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DebugInfo::set_allocated_other(::std::string* other) {
  if (other != NULL) {
    
  } else {
    
  }
  other_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:streaminterface.DebugInfo.Other)
}
inline void DebugInfo::unsafe_arena_set_allocated_other(
    ::std::string* other) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (other != NULL) {
    
  } else {
    
  }
  other_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      other, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaminterface.DebugInfo.Other)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace streaminterface

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::streaminterface::Instrument_InstrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::streaminterface::Instrument_InstrType>() {
  return ::streaminterface::Instrument_InstrType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mktdata_2eproto__INCLUDED
